type ProductAggregate {
    productId: Int!
    name: String!
    weight: Int!
    recommendations: [RecommendationSummary]
    reviews: [ReviewSummary]
    serviceAddresses: ServiceAddresses
}

input ProductAggregateInput {
    productId: Int!
    name: String!
    weight: Int!
}

type RecommendationSummary {
    recommendationId: Int!
    author: String!
    rate: Int!
    content: String!
}

input RecommendationSummaryInput {
    recommendationId: Int!
    author: String!
    rate: Int!
    content: String!
}

type ReviewSummary {
    reviewId: Int!
    author: String!
    subject: String!
    content: String!
}

input ReviewSummaryInput {
    reviewId: Int!
    author: String!
    subject: String!
    content: String!
}

type ServiceAddresses {
    cmp: String
    pro: String
    rev: String
    rec: String
}

input ServiceAddressesInput {
    cmp: String
    pro: String
    rev: String
    rec: String
}

type Query {
    getProductAggregate(productId: Int!): ProductAggregate!
}

type Mutation {
    createProductAggregate(body: ProductAggregateInput!): ProductAggregate
    deleteProductAggregate(productId: Int!): Boolean
}